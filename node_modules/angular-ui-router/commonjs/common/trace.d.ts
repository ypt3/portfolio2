import { Transition } from "../transition/transition";
import { ActiveUIView, ViewConfig } from "../view/interface";
export declare enum Category {
    RESOLVE = 0,
    TRANSITION = 1,
    HOOK = 2,
    INVOKE = 3,
    UIVIEW = 4,
    VIEWCONFIG = 5,
}
export declare class Trace {
    approximateDigests: number;
    constructor();
    private _enabled;
    private _set(enabled, categories);
    enable: (...categories: Category[]) => void;
    disable: (...categories: Category[]) => void;
    enabled(category: Category): boolean;
    traceTransitionStart(transition: Transition): void;
    traceTransitionIgnored(transition: Transition): void;
    traceHookInvocation(step: any, options: any): void;
    traceHookResult(hookResult: any, transitionResult: any, transitionOptions: any): void;
    traceResolvePath(path: any, options: any): void;
    traceResolvePathElement(pathElement: any, resolvablePromises: any, options: any): void;
    traceResolveResolvable(resolvable: any, options: any): void;
    traceResolvableResolved(resolvable: any, options: any): void;
    tracePathElementInvoke(node: any, fn: any, deps: any, options: any): void;
    traceError(error: any, transition: Transition): void;
    traceSuccess(finalState: any, transition: Transition): void;
    traceUiViewEvent(event: string, viewData: ActiveUIView, extra?: string): void;
    traceUiViewConfigUpdated(viewData: ActiveUIView, context: any): void;
    traceUiViewScopeCreated(viewData: ActiveUIView, newScope: any): void;
    traceUiViewFill(viewData: ActiveUIView, html: any): void;
    traceViewServiceEvent(event: string, viewConfig: ViewConfig): void;
    traceViewServiceUiViewEvent(event: string, viewData: ActiveUIView): void;
}
declare let trace: Trace;
export { trace };
